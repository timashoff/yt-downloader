#!/usr/bin/env node

import { Command } from 'commander';
import chalk from 'chalk';
import { validateYouTubeUrl, validateFormat, validateQuality, validateBrowser } from './validator.js';
import { downloadAudio, getVideoInfo } from './downloader.js';
import { DEFAULT_CONFIG, ERROR_MESSAGES, UI_CONSTANTS } from './constants.js';
import { logError, logSuccess, logInfo } from './logger.js';

const program = new Command();

program
  .name('yt-audio')
  .description('CLI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ —Å YouTube')
  .version('1.0.0')
  .argument('<url>', 'YouTube URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è')
  .option('-o, --output <dir>', `–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${DEFAULT_CONFIG.OUTPUT_DIR})`, DEFAULT_CONFIG.OUTPUT_DIR)
  .option('-f, --format <format>', `–§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ: ${DEFAULT_CONFIG.SUPPORTED_FORMATS.join('|')} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${DEFAULT_CONFIG.AUDIO_FORMAT})`, DEFAULT_CONFIG.AUDIO_FORMAT)
  .option('-q, --quality <quality>', `–ö–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ: ${DEFAULT_CONFIG.QUALITY_OPTIONS.join('|')} (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${DEFAULT_CONFIG.AUDIO_QUALITY})`, DEFAULT_CONFIG.AUDIO_QUALITY)
  .option('-i, --info', '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º')
  .option('-b, --browser <browser>', '–ë—Ä–∞—É–∑–µ—Ä –¥–ª—è cookies: chrome|firefox|safari|edge')
  .option('-c, --cookies <file>', '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É cookies.txt')
  .action(async (url, options) => {
    try {
      console.log(chalk.bold.blue('\nüéµ YouTube Audio Downloader\n'));

      const validation = validateYouTubeUrl(url);
      if (!validation.isValid) {
        logError(validation.error);
        process.exit(UI_CONSTANTS.EXIT_CODE_ERROR);
      }

      if (!(await validateFormat(options.format))) {
        logError(`${ERROR_MESSAGES.INVALID_FORMAT} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${DEFAULT_CONFIG.SUPPORTED_FORMATS.join(', ')}`);
        process.exit(UI_CONSTANTS.EXIT_CODE_ERROR);
      }

      if (!(await validateQuality(options.quality))) {
        logError(`${ERROR_MESSAGES.INVALID_QUALITY} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø—Ü–∏–∏: ${DEFAULT_CONFIG.QUALITY_OPTIONS.join(', ')}`);
        process.exit(UI_CONSTANTS.EXIT_CODE_ERROR);
      }

      if (!(await validateBrowser(options.browser))) {
        logError(`${ERROR_MESSAGES.INVALID_BROWSER} –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã: ${DEFAULT_CONFIG.SUPPORTED_BROWSERS.join(', ')}`);
        process.exit(UI_CONSTANTS.EXIT_CODE_ERROR);
      }

      if (options.info) {
        logInfo('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ...');
        const videoInfo = await getVideoInfo(url);
        if (videoInfo) {
          console.log(chalk.cyan('\nüìπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:'));
          console.log(chalk.white(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${videoInfo.title}`));
          console.log(chalk.white(`–ê–≤—Ç–æ—Ä: ${videoInfo.uploader}`));
          if (videoInfo.duration) {
            const minutes = Math.floor(videoInfo.duration / UI_CONSTANTS.SECONDS_IN_MINUTE);
            const seconds = videoInfo.duration % UI_CONSTANTS.SECONDS_IN_MINUTE;
            console.log(chalk.white(`–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${minutes}:${seconds.toString().padStart(UI_CONSTANTS.TIME_PAD_LENGTH, '0')}`));
          }
          console.log('');
        }
      }

      const downloadOptions = {
        outputDir: options.output,
        format: options.format.toLowerCase(),
        quality: options.quality.toLowerCase(),
        browser: options.browser,
        cookiesFile: options.cookies
      };

      const result = await downloadAudio(url, downloadOptions);

      if (result.success) {
        console.log(chalk.green.bold('\n‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n'));
      } else {
        process.exit(UI_CONSTANTS.EXIT_CODE_ERROR);
      }

    } catch (error) {
      logError('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    }
  });

program.parse();